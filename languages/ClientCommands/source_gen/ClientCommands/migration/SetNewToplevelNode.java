package ClientCommands.migration;

/*Generated by MPS */

import jetbrains.mps.lang.migration.runtime.base.MigrationScriptBase;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.migration.runtime.base.MigrationScriptReference;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class SetNewToplevelNode extends MigrationScriptBase {
  private final String description = "SetNewToplevelNode";
  public String getCaption() {
    return description;
  }
  @Override
  public boolean isRerunnable() {
    return true;
  }
  public SNode execute(final SModule m) {
    doExecute(m);
    return null;
  }
  public void doExecute(final SModule m) {
    Iterable<SModel> models = m.getModels();
    final Wrappers._T<SNode> root = new Wrappers._T<SNode>();
    Sequence.fromIterable(models).ofType(SModel.class).translate(new ITranslator2<SModel, SNode>() {
      public Iterable<SNode> translate(SModel it) {
        return SModelOperations.nodes(it, CONCEPTS.CommandVersionPool$8b);
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        root.value = it;
      }
    });
    Sequence.fromIterable(models).ofType(SModel.class).translate(new ITranslator2<SModel, SNode>() {
      public Iterable<SNode> translate(SModel it) {
        return SModelOperations.nodes(it, CONCEPTS.CommandListVersion$fm);
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode current) {
        ListSequence.fromList(SLinkOperations.getChildren(root.value, LINKS.commandPool$bUkP)).addElement(current);
      }
    });
  }
  public MigrationScriptReference getReference() {
    return new MigrationScriptReference(MetaAdapterFactory.getLanguage(0x803175666604ec4L, 0x9045cc3f1cabfba1L, "ClientCommands"), 0);
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept CommandVersionPool$8b = MetaAdapterFactory.getConcept(0x803175666604ec4L, 0x9045cc3f1cabfba1L, 0x7fc1c94250b16ef7L, "ClientCommands.structure.CommandVersionPool");
    /*package*/ static final SConcept CommandListVersion$fm = MetaAdapterFactory.getConcept(0x803175666604ec4L, 0x9045cc3f1cabfba1L, 0x2615a4c93fb84420L, "ClientCommands.structure.CommandListVersion");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink commandPool$bUkP = MetaAdapterFactory.getContainmentLink(0x803175666604ec4L, 0x9045cc3f1cabfba1L, 0x7fc1c94250b16ef7L, 0x7fc1c94250b2a372L, "commandPool");
  }
}
