package ClientCommands.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class CheckClientCommand_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public CheckClientCommand_NonTypesystemRule() {
  }
  public void applyRule(final SNode clientCommand, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    final String closeCommand = "close";
    final String patternValidName = "^[A-Za-z0-9]+$";
    //  Validate command name
    if (!(SPropertyOperations.getString(clientCommand, PROPS.name$MnvL).matches(patternValidName))) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(clientCommand, "Invalid name \"" + SPropertyOperations.getString(clientCommand, PROPS.name$MnvL) + "\"", "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "8863428079230218450", null, errorTarget);
      }
    }
    if (SPropertyOperations.getString(clientCommand, PROPS.name$MnvL).matches(closeCommand)) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(clientCommand, "\"" + closeCommand + "\" is a reserved client command", "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "6494658016074938696", null, errorTarget);
      }
    }
    //  Check that name is unique by comparing with siblings (ClientCommand)
    for (SNode sibling : SNodeOperations.getAllSiblings(clientCommand, false)) {
      if (Objects.equals(SNodeOperations.getConcept(clientCommand), SNodeOperations.getConcept(sibling))) {
        if (Objects.equals(SPropertyOperations.getString(clientCommand, PROPS.name$MnvL), SPropertyOperations.getString(((SNode) sibling), PROPS.name$MnvL))) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(clientCommand, "Client command with the same name", "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "8863428079228852132", null, errorTarget);
          }
        }
      }
    }
    //  Check name of local constant is valid and unique
    for (SNode commandConstant : SLinkOperations.getChildren(clientCommand, LINKS.commandConstants$4IsL)) {
      if (!(SPropertyOperations.getString(commandConstant, PROPS.name$MnvL).matches(patternValidName))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(commandConstant, "Invalid name \"" + SPropertyOperations.getString(commandConstant, PROPS.name$MnvL) + "\"", "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "8863428079234093983", null, errorTarget);
        }
      }
      //  Check that name is unique by comparing with siblings (StringConstant)
      for (SNode sibling : SNodeOperations.getAllSiblings(commandConstant, false)) {
        if (Objects.equals(SNodeOperations.getConcept(commandConstant), SNodeOperations.getConcept(sibling))) {
          if (Objects.equals(SPropertyOperations.getString(commandConstant, PROPS.name$MnvL), SPropertyOperations.getString(((SNode) sibling), PROPS.name$MnvL))) {
            {
              final MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(commandConstant, "Local constant with the same name", "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "8863428079226729643", null, errorTarget);
            }
          }
        }
      }
      // Check that name is unique by comparing with global constants
      for (SNode versionConstant : SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(clientCommand, CONCEPTS.CommandListVersion$fm, false, false), LINKS.versionConstants$GQ7p)) {
        if (Objects.equals(SPropertyOperations.getString(commandConstant, PROPS.name$MnvL), SPropertyOperations.getString(versionConstant, PROPS.name$MnvL))) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(commandConstant, "Version constant with the same name", "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "8863428079227150044", null, errorTarget);
          }
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(versionConstant, "Local constant with the same name in " + SPropertyOperations.getString(clientCommand, PROPS.name$MnvL), "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "8863428079227150515", null, errorTarget);
          }
        }
      }
    }
    //  Check that parameter name is valid and unique
    for (SNode parameter : SLinkOperations.getChildren(clientCommand, LINKS.commandParameters$l9Sr)) {
      if (!(SPropertyOperations.getString(parameter, PROPS.name$MnvL).matches(patternValidName))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(parameter, "Invalid name \"" + SPropertyOperations.getString(parameter, PROPS.name$MnvL) + "\"", "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "8863428079234096651", null, errorTarget);
        }
      }

      //  Check that parameter has a unique name by comparing it with siblings (StringParameter)
      for (SNode sibling : SNodeOperations.getAllSiblings(parameter, false)) {
        if (Objects.equals(SNodeOperations.getConcept(parameter), SNodeOperations.getConcept(sibling))) {
          if (Objects.equals(SPropertyOperations.getString(parameter, PROPS.name$MnvL), SPropertyOperations.getString(((SNode) sibling), PROPS.name$MnvL))) {
            {
              final MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(parameter, "Parameter with the same name", "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "8863428079226827877", null, errorTarget);
            }
          }
        }
      }
      // Check that parameter has a unique name by comparing it with global constants
      for (SNode versionConstant : SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(clientCommand, CONCEPTS.CommandListVersion$fm, false, false), LINKS.versionConstants$GQ7p)) {
        if (Objects.equals(SPropertyOperations.getString(parameter, PROPS.name$MnvL), SPropertyOperations.getString(versionConstant, PROPS.name$MnvL))) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(parameter, "Version constant with the same name", "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "8863428079227151117", null, errorTarget);
          }
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(versionConstant, "Local parameter with the same name in " + SPropertyOperations.getString(clientCommand, PROPS.name$MnvL), "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "8863428079227151120", null, errorTarget);
          }
        }
      }
    }
    // Check that constants and parameters have unique names
    for (SNode declaration : SLinkOperations.getChildren(clientCommand, LINKS.commandConstants$4IsL)) {
      for (SNode parameter : SLinkOperations.getChildren(clientCommand, LINKS.commandParameters$l9Sr)) {
        if (Objects.equals(SPropertyOperations.getString(declaration, PROPS.name$MnvL), SPropertyOperations.getString(parameter, PROPS.name$MnvL))) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(declaration, "Parameter with the same name", "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "8863428079226932807", null, errorTarget);
          }
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(parameter, "Constant with the same name", "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "8863428079226933383", null, errorTarget);
          }
        }
      }
    }
    // Check that all parameters are referenced
    for (final SNode parameter : SLinkOperations.getChildren(clientCommand, LINKS.commandParameters$l9Sr)) {
      if (!(ListSequence.fromList(SNodeOperations.getNodeDescendants(clientCommand, CONCEPTS.StringValueReference$SJ, false, new SAbstractConcept[]{})).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return Objects.equals(SLinkOperations.getTarget(it, LINKS.value$4E$k), parameter);
        }
      }))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(parameter, "Parameter not referenced ", "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "6494658016074152341", null, errorTarget);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.ClientCommand$QP;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink commandConstants$4IsL = MetaAdapterFactory.getContainmentLink(0x803175666604ec4L, 0x9045cc3f1cabfba1L, 0x2615a4c93fb9ae0eL, 0x2615a4c93fb9ae43L, "commandConstants");
    /*package*/ static final SContainmentLink versionConstants$GQ7p = MetaAdapterFactory.getContainmentLink(0x803175666604ec4L, 0x9045cc3f1cabfba1L, 0x2615a4c93fb84420L, 0x2615a4c93fbdb671L, "versionConstants");
    /*package*/ static final SContainmentLink commandParameters$l9Sr = MetaAdapterFactory.getContainmentLink(0x803175666604ec4L, 0x9045cc3f1cabfba1L, 0x2615a4c93fb9ae0eL, 0x2615a4c93fbcac0cL, "commandParameters");
    /*package*/ static final SReferenceLink value$4E$k = MetaAdapterFactory.getReferenceLink(0x803175666604ec4L, 0x9045cc3f1cabfba1L, 0x2615a4c93fc158adL, 0x2615a4c93fc158aeL, "value");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept CommandListVersion$fm = MetaAdapterFactory.getConcept(0x803175666604ec4L, 0x9045cc3f1cabfba1L, 0x2615a4c93fb84420L, "ClientCommands.structure.CommandListVersion");
    /*package*/ static final SConcept StringValueReference$SJ = MetaAdapterFactory.getConcept(0x803175666604ec4L, 0x9045cc3f1cabfba1L, 0x2615a4c93fc158adL, "ClientCommands.structure.StringValueReference");
    /*package*/ static final SConcept ClientCommand$QP = MetaAdapterFactory.getConcept(0x803175666604ec4L, 0x9045cc3f1cabfba1L, 0x2615a4c93fb9ae0eL, "ClientCommands.structure.ClientCommand");
  }
}
