package ClientCommands.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Objects;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class CheckDrawInterface_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public CheckDrawInterface_NonTypesystemRule() {
  }
  public void applyRule(final SNode drawInterface, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    //  Name needs to be at least one character long
    final String patternValidName = "^[A-Za-z0-9]+$";

    //  Validate format of the name
    for (SNode globalDeclaration : SLinkOperations.getChildren(drawInterface, LINKS.versionGlobals$GQ7p)) {
      if (!(SPropertyOperations.getString(globalDeclaration, PROPS.name$MnvL).matches(patternValidName))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(globalDeclaration, "Invalid name \"" + SPropertyOperations.getString(globalDeclaration, PROPS.name$MnvL) + "\"", "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "8863428079234030983", null, errorTarget);
        }
      }
      //  Check globals for unique names 
      for (SNode sibling : SNodeOperations.getAllSiblings(globalDeclaration, false)) {
        if (Objects.equals(SNodeOperations.getConcept(globalDeclaration), SNodeOperations.getConcept(sibling))) {
          if (Objects.equals(SPropertyOperations.getString(globalDeclaration, PROPS.name$MnvL), SPropertyOperations.getString(((SNode) sibling), PROPS.name$MnvL))) {
            {
              final MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(globalDeclaration, "Global constant with same name", "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "8863428079226608990", null, errorTarget);
            }
          }
        }
      }
      // Check if global is referenced
      boolean referenced = false;
      for (SNode reference : SNodeOperations.getNodeDescendants(drawInterface, CONCEPTS.StringValueReference$SJ, false, new SAbstractConcept[]{})) {
        if (Objects.equals(SLinkOperations.getTarget(reference, LINKS.value$4E$k), globalDeclaration)) {
          referenced = true;
          break;
        }
      }
      if (!(referenced)) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(globalDeclaration, "Global not referenced ", "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "6494658016071533738", null, errorTarget);
        }
      }
    }
    // Check that versions are unique
    for (SNode sibling : SNodeOperations.getAllSiblings(drawInterface, false)) {
      if (Objects.equals(SNodeOperations.getConcept(drawInterface), SNodeOperations.getConcept(sibling))) {
        if (Objects.equals(SPropertyOperations.getInteger(drawInterface, PROPS.version$$d0n), SPropertyOperations.getInteger(((SNode) sibling), PROPS.version$$d0n))) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(drawInterface, "Duplicate version " + SPropertyOperations.getInteger(drawInterface, PROPS.version$$d0n), "r:17f4d462-c675-4762-86e4-94a0f91797ba(ClientCommands.typesystem)", "2460582428491538814", null, errorTarget);
          }
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.CommandListVersion$fm;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty version$$d0n = MetaAdapterFactory.getProperty(0x803175666604ec4L, 0x9045cc3f1cabfba1L, 0x2615a4c93fb84420L, 0x2615a4c93fb9ae48L, "version");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink value$4E$k = MetaAdapterFactory.getReferenceLink(0x803175666604ec4L, 0x9045cc3f1cabfba1L, 0x2615a4c93fc158adL, 0x2615a4c93fc158aeL, "value");
    /*package*/ static final SContainmentLink versionGlobals$GQ7p = MetaAdapterFactory.getContainmentLink(0x803175666604ec4L, 0x9045cc3f1cabfba1L, 0x2615a4c93fb84420L, 0x2615a4c93fbdb671L, "versionGlobals");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept StringValueReference$SJ = MetaAdapterFactory.getConcept(0x803175666604ec4L, 0x9045cc3f1cabfba1L, 0x2615a4c93fc158adL, "ClientCommands.structure.StringValueReference");
    /*package*/ static final SConcept CommandListVersion$fm = MetaAdapterFactory.getConcept(0x803175666604ec4L, 0x9045cc3f1cabfba1L, 0x2615a4c93fb84420L, "ClientCommands.structure.CommandListVersion");
  }
}
