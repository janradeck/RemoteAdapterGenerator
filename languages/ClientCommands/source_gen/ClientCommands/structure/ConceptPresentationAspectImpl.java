package ClientCommands.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ClientCommand;
  private ConceptPresentation props_CommandListVersion;
  private ConceptPresentation props_CommandVersionPool;
  private ConceptPresentation props_ServerCommand;
  private ConceptPresentation props_ServerCommandClearCanvas;
  private ConceptPresentation props_ServerCommandDrawPath;
  private ConceptPresentation props_StringConstant;
  private ConceptPresentation props_StringParameter;
  private ConceptPresentation props_StringValue;
  private ConceptPresentation props_StringValueReference;
  private ConceptPresentation props_StringValueTraits;
  private ConceptPresentation props_Value;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ClientCommand:
        if (props_ClientCommand == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ClientCommand = cpb.create();
        }
        return props_ClientCommand;
      case LanguageConceptSwitch.CommandListVersion:
        if (props_CommandListVersion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("The definition of all client-side commands for a given version");
          cpb.rawPresentation("CommandListVersion");
          props_CommandListVersion = cpb.create();
        }
        return props_CommandListVersion;
      case LanguageConceptSwitch.CommandVersionPool:
        if (props_CommandVersionPool == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CommandVersionPool = cpb.create();
        }
        return props_CommandVersionPool;
      case LanguageConceptSwitch.ServerCommand:
        if (props_ServerCommand == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ServerCommand = cpb.create();
        }
        return props_ServerCommand;
      case LanguageConceptSwitch.ServerCommandClearCanvas:
        if (props_ServerCommandClearCanvas == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Clear the canvas");
          cpb.presentationByName();
          props_ServerCommandClearCanvas = cpb.create();
        }
        return props_ServerCommandClearCanvas;
      case LanguageConceptSwitch.ServerCommandDrawPath:
        if (props_ServerCommandDrawPath == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("SVG command \"path\"");
          cpb.presentationByName();
          props_ServerCommandDrawPath = cpb.create();
        }
        return props_ServerCommandDrawPath;
      case LanguageConceptSwitch.StringConstant:
        if (props_StringConstant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StringConstant = cpb.create();
        }
        return props_StringConstant;
      case LanguageConceptSwitch.StringParameter:
        if (props_StringParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StringParameter = cpb.create();
        }
        return props_StringParameter;
      case LanguageConceptSwitch.StringValue:
        if (props_StringValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_StringValue = cpb.create();
        }
        return props_StringValue;
      case LanguageConceptSwitch.StringValueReference:
        if (props_StringValueReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x803175666604ec4L, 0x9045cc3f1cabfba1L, 0x2615a4c93fc158adL, 0x2615a4c93fc158aeL, "value", "", "");
          props_StringValueReference = cpb.create();
        }
        return props_StringValueReference;
      case LanguageConceptSwitch.StringValueTraits:
        if (props_StringValueTraits == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_StringValueTraits = cpb.create();
        }
        return props_StringValueTraits;
      case LanguageConceptSwitch.Value:
        if (props_Value == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Value = cpb.create();
        }
        return props_Value;
    }
    return null;
  }
}
